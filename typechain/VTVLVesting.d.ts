/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import { EventFragment, FunctionFragment, Result } from '@ethersproject/abi';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  CallOverrides,
  ContractTransaction,
  EventFilter,
  Overrides,
  PopulatedTransaction,
  Signer,
  ethers
} from 'ethers';

import type { TypedEvent, TypedEventFilter, TypedListener } from './common';

interface VTVLVestingInterface extends ethers.utils.Interface {
  functions: {
    'allVestingRecipients()': FunctionFragment;
    'amountAvailableToWithdrawByAdmin()': FunctionFragment;
    'claimableAmount(address)': FunctionFragment;
    'createClaim(address,uint40,uint40,uint40,uint40,uint112,uint112)': FunctionFragment;
    'createClaimsBatch(address[],uint40[],uint40[],uint40[],uint40[],uint112[],uint112[])': FunctionFragment;
    'finalClaimableAmount(address)': FunctionFragment;
    'finalVestedAmount(address)': FunctionFragment;
    'getClaim(address)': FunctionFragment;
    'isAdmin(address)': FunctionFragment;
    'numTokensReservedForVesting()': FunctionFragment;
    'numVestingRecipients()': FunctionFragment;
    'revokeClaim(address)': FunctionFragment;
    'setAdmin(address,bool)': FunctionFragment;
    'tokenAddress()': FunctionFragment;
    'vestedAmount(address,uint40)': FunctionFragment;
    'withdraw()': FunctionFragment;
    'withdrawAdmin(uint256)': FunctionFragment;
    'withdrawOtherToken(address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'allVestingRecipients', values?: undefined): string;
  encodeFunctionData(functionFragment: 'amountAvailableToWithdrawByAdmin', values?: undefined): string;
  encodeFunctionData(functionFragment: 'claimableAmount', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'createClaim',
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: 'createClaimsBatch',
    values: [string[], BigNumberish[], BigNumberish[], BigNumberish[], BigNumberish[], BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: 'finalClaimableAmount', values: [string]): string;
  encodeFunctionData(functionFragment: 'finalVestedAmount', values: [string]): string;
  encodeFunctionData(functionFragment: 'getClaim', values: [string]): string;
  encodeFunctionData(functionFragment: 'isAdmin', values: [string]): string;
  encodeFunctionData(functionFragment: 'numTokensReservedForVesting', values?: undefined): string;
  encodeFunctionData(functionFragment: 'numVestingRecipients', values?: undefined): string;
  encodeFunctionData(functionFragment: 'revokeClaim', values: [string]): string;
  encodeFunctionData(functionFragment: 'setAdmin', values: [string, boolean]): string;
  encodeFunctionData(functionFragment: 'tokenAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'vestedAmount', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string;
  encodeFunctionData(functionFragment: 'withdrawAdmin', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'withdrawOtherToken', values: [string]): string;

  decodeFunctionResult(functionFragment: 'allVestingRecipients', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'amountAvailableToWithdrawByAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'claimableAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createClaim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'createClaimsBatch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'finalClaimableAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'finalVestedAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getClaim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'numTokensReservedForVesting', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'numVestingRecipients', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeClaim', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vestedAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdrawOtherToken', data: BytesLike): Result;

  events: {
    'AdminAccessSet(address,bool)': EventFragment;
    'AdminWithdrawn(address,uint256)': EventFragment;
    'ClaimCreated(address,tuple)': EventFragment;
    'ClaimRevoked(address,uint256,uint256,tuple)': EventFragment;
    'Claimed(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminAccessSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AdminWithdrawn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ClaimCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ClaimRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Claimed'): EventFragment;
}

export type AdminAccessSetEvent = TypedEvent<[string, boolean] & { _admin: string; _enabled: boolean }>;

export type AdminWithdrawnEvent = TypedEvent<[string, BigNumber] & { _recipient: string; _amountRequested: BigNumber }>;

export type ClaimCreatedEvent = TypedEvent<
  [
    string,
    [number, number, number, number, BigNumber, BigNumber, BigNumber, boolean, number] & {
      startTimestamp: number;
      endTimestamp: number;
      cliffReleaseTimestamp: number;
      releaseIntervalSecs: number;
      linearVestAmount: BigNumber;
      amountWithdrawn: BigNumber;
      cliffAmount: BigNumber;
      isActive: boolean;
      deactivationTimestamp: number;
    }
  ] & {
    _recipient: string;
    _claim: [number, number, number, number, BigNumber, BigNumber, BigNumber, boolean, number] & {
      startTimestamp: number;
      endTimestamp: number;
      cliffReleaseTimestamp: number;
      releaseIntervalSecs: number;
      linearVestAmount: BigNumber;
      amountWithdrawn: BigNumber;
      cliffAmount: BigNumber;
      isActive: boolean;
      deactivationTimestamp: number;
    };
  }
>;

export type ClaimRevokedEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    [number, number, number, number, BigNumber, BigNumber, BigNumber, boolean, number] & {
      startTimestamp: number;
      endTimestamp: number;
      cliffReleaseTimestamp: number;
      releaseIntervalSecs: number;
      linearVestAmount: BigNumber;
      amountWithdrawn: BigNumber;
      cliffAmount: BigNumber;
      isActive: boolean;
      deactivationTimestamp: number;
    }
  ] & {
    _recipient: string;
    _numTokensWithheld: BigNumber;
    revocationTimestamp: BigNumber;
    _claim: [number, number, number, number, BigNumber, BigNumber, BigNumber, boolean, number] & {
      startTimestamp: number;
      endTimestamp: number;
      cliffReleaseTimestamp: number;
      releaseIntervalSecs: number;
      linearVestAmount: BigNumber;
      amountWithdrawn: BigNumber;
      cliffAmount: BigNumber;
      isActive: boolean;
      deactivationTimestamp: number;
    };
  }
>;

export type ClaimedEvent = TypedEvent<[string, BigNumber] & { _recipient: string; _withdrawalAmount: BigNumber }>;

export class VTVLVesting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VTVLVestingInterface;

  functions: {
    allVestingRecipients(overrides?: CallOverrides): Promise<[string[]]>;

    amountAvailableToWithdrawByAdmin(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimableAmount(_recipient: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    createClaim(
      _recipient: string,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _cliffReleaseTimestamp: BigNumberish,
      _releaseIntervalSecs: BigNumberish,
      _linearVestAmount: BigNumberish,
      _cliffAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createClaimsBatch(
      _recipients: string[],
      _startTimestamps: BigNumberish[],
      _endTimestamps: BigNumberish[],
      _cliffReleaseTimestamps: BigNumberish[],
      _releaseIntervalsSecs: BigNumberish[],
      _linearVestAmounts: BigNumberish[],
      _cliffAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finalClaimableAmount(_recipient: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    finalVestedAmount(_recipient: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getClaim(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, number, number, number, BigNumber, BigNumber, BigNumber, boolean, number] & {
          startTimestamp: number;
          endTimestamp: number;
          cliffReleaseTimestamp: number;
          releaseIntervalSecs: number;
          linearVestAmount: BigNumber;
          amountWithdrawn: BigNumber;
          cliffAmount: BigNumber;
          isActive: boolean;
          deactivationTimestamp: number;
        }
      ]
    >;

    isAdmin(_addressToCheck: string, overrides?: CallOverrides): Promise<[boolean]>;

    numTokensReservedForVesting(overrides?: CallOverrides): Promise<[BigNumber]>;

    numVestingRecipients(overrides?: CallOverrides): Promise<[BigNumber]>;

    revokeClaim(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      admin: string,
      isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenAddress(overrides?: CallOverrides): Promise<[string]>;

    vestedAmount(_recipient: string, _referenceTs: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    withdrawAdmin(
      _amountRequested: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawOtherToken(
      _otherTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allVestingRecipients(overrides?: CallOverrides): Promise<string[]>;

  amountAvailableToWithdrawByAdmin(overrides?: CallOverrides): Promise<BigNumber>;

  claimableAmount(_recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

  createClaim(
    _recipient: string,
    _startTimestamp: BigNumberish,
    _endTimestamp: BigNumberish,
    _cliffReleaseTimestamp: BigNumberish,
    _releaseIntervalSecs: BigNumberish,
    _linearVestAmount: BigNumberish,
    _cliffAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createClaimsBatch(
    _recipients: string[],
    _startTimestamps: BigNumberish[],
    _endTimestamps: BigNumberish[],
    _cliffReleaseTimestamps: BigNumberish[],
    _releaseIntervalsSecs: BigNumberish[],
    _linearVestAmounts: BigNumberish[],
    _cliffAmounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finalClaimableAmount(_recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

  finalVestedAmount(_recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

  getClaim(
    _recipient: string,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, BigNumber, BigNumber, BigNumber, boolean, number] & {
      startTimestamp: number;
      endTimestamp: number;
      cliffReleaseTimestamp: number;
      releaseIntervalSecs: number;
      linearVestAmount: BigNumber;
      amountWithdrawn: BigNumber;
      cliffAmount: BigNumber;
      isActive: boolean;
      deactivationTimestamp: number;
    }
  >;

  isAdmin(_addressToCheck: string, overrides?: CallOverrides): Promise<boolean>;

  numTokensReservedForVesting(overrides?: CallOverrides): Promise<BigNumber>;

  numVestingRecipients(overrides?: CallOverrides): Promise<BigNumber>;

  revokeClaim(
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    admin: string,
    isEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenAddress(overrides?: CallOverrides): Promise<string>;

  vestedAmount(_recipient: string, _referenceTs: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  withdrawAdmin(
    _amountRequested: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawOtherToken(
    _otherTokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allVestingRecipients(overrides?: CallOverrides): Promise<string[]>;

    amountAvailableToWithdrawByAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    claimableAmount(_recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

    createClaim(
      _recipient: string,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _cliffReleaseTimestamp: BigNumberish,
      _releaseIntervalSecs: BigNumberish,
      _linearVestAmount: BigNumberish,
      _cliffAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createClaimsBatch(
      _recipients: string[],
      _startTimestamps: BigNumberish[],
      _endTimestamps: BigNumberish[],
      _cliffReleaseTimestamps: BigNumberish[],
      _releaseIntervalsSecs: BigNumberish[],
      _linearVestAmounts: BigNumberish[],
      _cliffAmounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    finalClaimableAmount(_recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

    finalVestedAmount(_recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

    getClaim(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number, BigNumber, BigNumber, BigNumber, boolean, number] & {
        startTimestamp: number;
        endTimestamp: number;
        cliffReleaseTimestamp: number;
        releaseIntervalSecs: number;
        linearVestAmount: BigNumber;
        amountWithdrawn: BigNumber;
        cliffAmount: BigNumber;
        isActive: boolean;
        deactivationTimestamp: number;
      }
    >;

    isAdmin(_addressToCheck: string, overrides?: CallOverrides): Promise<boolean>;

    numTokensReservedForVesting(overrides?: CallOverrides): Promise<BigNumber>;

    numVestingRecipients(overrides?: CallOverrides): Promise<BigNumber>;

    revokeClaim(_recipient: string, overrides?: CallOverrides): Promise<void>;

    setAdmin(admin: string, isEnabled: boolean, overrides?: CallOverrides): Promise<void>;

    tokenAddress(overrides?: CallOverrides): Promise<string>;

    vestedAmount(_recipient: string, _referenceTs: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    withdrawAdmin(_amountRequested: BigNumberish, overrides?: CallOverrides): Promise<void>;

    withdrawOtherToken(_otherTokenAddress: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'AdminAccessSet(address,bool)'(
      _admin?: string | null,
      _enabled?: null
    ): TypedEventFilter<[string, boolean], { _admin: string; _enabled: boolean }>;

    AdminAccessSet(
      _admin?: string | null,
      _enabled?: null
    ): TypedEventFilter<[string, boolean], { _admin: string; _enabled: boolean }>;

    'AdminWithdrawn(address,uint256)'(
      _recipient?: string | null,
      _amountRequested?: null
    ): TypedEventFilter<[string, BigNumber], { _recipient: string; _amountRequested: BigNumber }>;

    AdminWithdrawn(
      _recipient?: string | null,
      _amountRequested?: null
    ): TypedEventFilter<[string, BigNumber], { _recipient: string; _amountRequested: BigNumber }>;

    'ClaimCreated(address,tuple)'(
      _recipient?: string | null,
      _claim?: null
    ): TypedEventFilter<
      [
        string,
        [number, number, number, number, BigNumber, BigNumber, BigNumber, boolean, number] & {
          startTimestamp: number;
          endTimestamp: number;
          cliffReleaseTimestamp: number;
          releaseIntervalSecs: number;
          linearVestAmount: BigNumber;
          amountWithdrawn: BigNumber;
          cliffAmount: BigNumber;
          isActive: boolean;
          deactivationTimestamp: number;
        }
      ],
      {
        _recipient: string;
        _claim: [number, number, number, number, BigNumber, BigNumber, BigNumber, boolean, number] & {
          startTimestamp: number;
          endTimestamp: number;
          cliffReleaseTimestamp: number;
          releaseIntervalSecs: number;
          linearVestAmount: BigNumber;
          amountWithdrawn: BigNumber;
          cliffAmount: BigNumber;
          isActive: boolean;
          deactivationTimestamp: number;
        };
      }
    >;

    ClaimCreated(
      _recipient?: string | null,
      _claim?: null
    ): TypedEventFilter<
      [
        string,
        [number, number, number, number, BigNumber, BigNumber, BigNumber, boolean, number] & {
          startTimestamp: number;
          endTimestamp: number;
          cliffReleaseTimestamp: number;
          releaseIntervalSecs: number;
          linearVestAmount: BigNumber;
          amountWithdrawn: BigNumber;
          cliffAmount: BigNumber;
          isActive: boolean;
          deactivationTimestamp: number;
        }
      ],
      {
        _recipient: string;
        _claim: [number, number, number, number, BigNumber, BigNumber, BigNumber, boolean, number] & {
          startTimestamp: number;
          endTimestamp: number;
          cliffReleaseTimestamp: number;
          releaseIntervalSecs: number;
          linearVestAmount: BigNumber;
          amountWithdrawn: BigNumber;
          cliffAmount: BigNumber;
          isActive: boolean;
          deactivationTimestamp: number;
        };
      }
    >;

    'ClaimRevoked(address,uint256,uint256,tuple)'(
      _recipient?: string | null,
      _numTokensWithheld?: null,
      revocationTimestamp?: null,
      _claim?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        [number, number, number, number, BigNumber, BigNumber, BigNumber, boolean, number] & {
          startTimestamp: number;
          endTimestamp: number;
          cliffReleaseTimestamp: number;
          releaseIntervalSecs: number;
          linearVestAmount: BigNumber;
          amountWithdrawn: BigNumber;
          cliffAmount: BigNumber;
          isActive: boolean;
          deactivationTimestamp: number;
        }
      ],
      {
        _recipient: string;
        _numTokensWithheld: BigNumber;
        revocationTimestamp: BigNumber;
        _claim: [number, number, number, number, BigNumber, BigNumber, BigNumber, boolean, number] & {
          startTimestamp: number;
          endTimestamp: number;
          cliffReleaseTimestamp: number;
          releaseIntervalSecs: number;
          linearVestAmount: BigNumber;
          amountWithdrawn: BigNumber;
          cliffAmount: BigNumber;
          isActive: boolean;
          deactivationTimestamp: number;
        };
      }
    >;

    ClaimRevoked(
      _recipient?: string | null,
      _numTokensWithheld?: null,
      revocationTimestamp?: null,
      _claim?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        [number, number, number, number, BigNumber, BigNumber, BigNumber, boolean, number] & {
          startTimestamp: number;
          endTimestamp: number;
          cliffReleaseTimestamp: number;
          releaseIntervalSecs: number;
          linearVestAmount: BigNumber;
          amountWithdrawn: BigNumber;
          cliffAmount: BigNumber;
          isActive: boolean;
          deactivationTimestamp: number;
        }
      ],
      {
        _recipient: string;
        _numTokensWithheld: BigNumber;
        revocationTimestamp: BigNumber;
        _claim: [number, number, number, number, BigNumber, BigNumber, BigNumber, boolean, number] & {
          startTimestamp: number;
          endTimestamp: number;
          cliffReleaseTimestamp: number;
          releaseIntervalSecs: number;
          linearVestAmount: BigNumber;
          amountWithdrawn: BigNumber;
          cliffAmount: BigNumber;
          isActive: boolean;
          deactivationTimestamp: number;
        };
      }
    >;

    'Claimed(address,uint256)'(
      _recipient?: string | null,
      _withdrawalAmount?: null
    ): TypedEventFilter<[string, BigNumber], { _recipient: string; _withdrawalAmount: BigNumber }>;

    Claimed(
      _recipient?: string | null,
      _withdrawalAmount?: null
    ): TypedEventFilter<[string, BigNumber], { _recipient: string; _withdrawalAmount: BigNumber }>;
  };

  estimateGas: {
    allVestingRecipients(overrides?: CallOverrides): Promise<BigNumber>;

    amountAvailableToWithdrawByAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    claimableAmount(_recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

    createClaim(
      _recipient: string,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _cliffReleaseTimestamp: BigNumberish,
      _releaseIntervalSecs: BigNumberish,
      _linearVestAmount: BigNumberish,
      _cliffAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createClaimsBatch(
      _recipients: string[],
      _startTimestamps: BigNumberish[],
      _endTimestamps: BigNumberish[],
      _cliffReleaseTimestamps: BigNumberish[],
      _releaseIntervalsSecs: BigNumberish[],
      _linearVestAmounts: BigNumberish[],
      _cliffAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finalClaimableAmount(_recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

    finalVestedAmount(_recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

    getClaim(_recipient: string, overrides?: CallOverrides): Promise<BigNumber>;

    isAdmin(_addressToCheck: string, overrides?: CallOverrides): Promise<BigNumber>;

    numTokensReservedForVesting(overrides?: CallOverrides): Promise<BigNumber>;

    numVestingRecipients(overrides?: CallOverrides): Promise<BigNumber>;

    revokeClaim(_recipient: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setAdmin(
      admin: string,
      isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    vestedAmount(_recipient: string, _referenceTs: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    withdrawAdmin(
      _amountRequested: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawOtherToken(
      _otherTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allVestingRecipients(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    amountAvailableToWithdrawByAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimableAmount(_recipient: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createClaim(
      _recipient: string,
      _startTimestamp: BigNumberish,
      _endTimestamp: BigNumberish,
      _cliffReleaseTimestamp: BigNumberish,
      _releaseIntervalSecs: BigNumberish,
      _linearVestAmount: BigNumberish,
      _cliffAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createClaimsBatch(
      _recipients: string[],
      _startTimestamps: BigNumberish[],
      _endTimestamps: BigNumberish[],
      _cliffReleaseTimestamps: BigNumberish[],
      _releaseIntervalsSecs: BigNumberish[],
      _linearVestAmounts: BigNumberish[],
      _cliffAmounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finalClaimableAmount(_recipient: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finalVestedAmount(_recipient: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClaim(_recipient: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isAdmin(_addressToCheck: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numTokensReservedForVesting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numVestingRecipients(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revokeClaim(
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      admin: string,
      isEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vestedAmount(
      _recipient: string,
      _referenceTs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    withdrawAdmin(
      _amountRequested: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawOtherToken(
      _otherTokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
